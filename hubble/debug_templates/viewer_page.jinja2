<!DOCTYPE html>
<html lang="ru">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>DEBUG VIEWER</title>
    </head>
    <body>
        <header>
            <div class="header-left">
                <button
                    id="toggle-highlight"
                    class="toggle-btn"
                    title="Подсветка совпадений"
                >
                    <svg
                        viewBox="0 0 24 24"
                        id="underline-4"
                        data-name="Flat Color"
                        xmlns="http://www.w3.org/2000/svg"
                        class="icon flat-color"
                    >
                        <g>
                            <path
                                id="secondary"
                                d="M19,22H5a1,1,0,0,1,0-2H19a1,1,0,0,1,0,2Z"
                            />
                            <path
                                id="primary"
                                d="M18,2H16a1,1,0,0,0,0,2v8a4,4,0,0,1-4,4,3,3,0,0,1-3-3V4h1a1,1,0,0,0,0-2H5A1,1,0,0,0,5,4H6v8a6,6,0,0,0,12,0V4a1,1,0,0,0,0-2Z"
                            />
                        </g>
                    </svg>
                </button>
                <button
                    id="toggle-lines"
                    class="toggle-btn"
                    title="Линии связей"
                >
                    <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <g>
                            <path
                                d="M8.12132 15.8787C7.57843 15.3358 6.82843 15 6 15C4.34315 15 3 16.3431 3 18C3 19.6569 4.34315 21 6 21C7.65685 21 9 19.6569 9 18C9 17.1716 8.66421 16.4216 8.12132 15.8787ZM8.12132 15.8787L15.8787 8.12132M15.8787 8.12132C16.4216 8.66421 17.1716 9 18 9C19.6569 9 21 7.65685 21 6C21 4.34315 19.6569 3 18 3C16.3431 3 15 4.34315 15 6C15 6.82843 15.3358 7.57843 15.8787 8.12132ZM15.8787 8.12132L15.8828 8.11719"
                            />
                        </g>
                    </svg>
                </button>
                <button
                    id="toggle-navigation"
                    class="toggle-btn"
                    title="Навигация по данным"
                >
                    <svg
                        viewBox="0 0 24 24"
                        id="nav-icon"
                        xmlns="http://www.w3.org/2000/svg"
                        version="1.1"
                        xml:space="preserve"
                        height="2em"
                        width="2em"
                    >
                        <g id="navigate">
                            <path
                                d="M15,24H9V11H3.5L0,7.5L3.5,4H9V3l3-3l3,3v4h5.5l3.5,3.5L20.5,14H15C15,14,15,24,15,24z M11,22h2V3.8l-1-1l-1,1V22z M15,12h4.7l1.5-1.5L19.7,9H15
                C15,8.9,15,12,15,12z M4.3,9H9V6H4.3L2.8,7.5L4.3,9z"
                            />
                        </g>
                    </svg>
                </button>
                <button
                    id="toggle-auto-scroll"
                    class="toggle-btn"
                    title="Автоматический скроллинг противоположного поля"
                >
                    <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <g>
                            <path
                                d="M14 10C14 9.44771 13.5523 9 13 9H12.5C9.46243 9 7 11.4624 7 14.5C7 17.5376 9.46243 20 12.5 20H17.5C20.5376 20 23 17.5376 23 14.5C23 12.0091 21.3441 9.90488 19.073 9.22823C18.5098 9.06042 18 9.52887 18 10.1166V10.1683C18 10.6659 18.3745 11.0735 18.8345 11.2634C20.1055 11.788 21 13.0395 21 14.5C21 16.433 19.433 18 17.5 18H12.5C10.567 18 9 16.433 9 14.5C9 12.567 10.567 11 12.5 11H13C13.5523 11 14 10.5523 14 10Z"
                            />
                            <path
                                d="M11.5 4C14.5376 4 17 6.46243 17 9.5C17 12.5376 14.5376 15 11.5 15H11C10.4477 15 10 14.5523 10 14C10 13.4477 10.4477 13 11 13H11.5C13.433 13 15 11.433 15 9.5C15 7.567 13.433 6 11.5 6H6.5C4.567 6 3 7.567 3 9.5C3 10.9605 3.89451 12.212 5.16553 12.7366C5.62548 12.9264 6 13.3341 6 13.8317V13.8834C6 14.4711 5.49024 14.9396 4.92699 14.7718C2.65592 14.0951 1 11.9909 1 9.5C1 6.46243 3.46243 4 6.5 4H11.5Z"
                            />
                        </g>
                    </svg>
                </button>
                <!-- Новый инструмент: копирование пути к элементу -->
                <button
                    id="toggle-path"
                    class="toggle-btn"
                    title="Копировать путь элемента"
                >
                    <svg viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
                        <g>
                            <polygon points="7.1,23 8.9,23 8,21.2"></polygon>
                            <path
                                d="M13,16H3c-1.1,0-2,0.9-2,2v10c0,1.1,0.9,2,2,2h10c1.1,0,2-0.9,2-2V18C15,16.9,14.1,16,13,16z M12.4,27.9
                C12.3,28,12.2,28,12,28c-0.4,0-0.7-0.2-0.9-0.6L9.9,25H6.1l-1.2,2.4c-0.2,0.5-0.8,0.7-1.3,0.4c-0.5-0.2-0.7-0.8-0.4-1.3l4-8
                c0.3-0.7,1.5-0.7,1.8,0l4,8C13.1,27,12.9,27.6,12.4,27.9z"
                            ></path>
                        </g>
                        <path
                            d="M17,1H7C5.9,1,5,1.9,5,3v10c0,1.1,0.9,2,2,2h10c1.1,0,2-0.9,2-2V3C19,1.9,18.1,1,17,1z M12,11
              c0.9,0,1.7-0.4,2.2-1c0.4-0.4,1-0.5,1.4-0.1c0.4,0.4,0.5,1,0.1,1.4c-1,1.1-2.3,1.7-3.8,1.7
              c-2.8,0-5-2.2-5-5s2.2-5,5-5c1.4,0,2.8,0.6,3.8,1.7c0.4,0.4,0.3,1-0.1,1.4c-0.4,0.4-1,0.3-1.4-0.1
              c-0.6-0.7-1.4-1-2.2-1c-1.7,0-3,1.3-3,3S10.3,11,12,11z"
                        />
                        <g>
                            <path
                                d="M24,24h-3v2h3c0.6,0,1-0.4,1-1S24.6,24,24,24z"
                            />
                            <path
                                d="M25,21c0-0.6-0.4-1-1-1h-3v2h3C24.6,22,25,21.6,25,21z"
                            />
                            <path
                                d="M28,16H18c-1.1,0-2,0.9-2,2v10c0,1.1,0.9,2,2,2h10c1.1,0,2-0.9,2-2V18C30,16.9,29.1,16,28,16z
                M27,25c0,1.7-1.3,3-3,3h-4c-0.6,0-1-0.4-1-1v-4v-4c0-0.6,0.4-1,1-1h4c1.7,0,3,1.3,3,3c0,0.8-0.3,1.5-0.8,2
                C26.7,23.5,27,24.2,27,25z"
                            />
                        </g>
                    </svg>
                </button>
            </div>
            <div class="header-logo">
              <a href="/">
                  <div class="svg-container">
                      <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="1754"
                          height="328"
                          viewBox="0 0 1754 328"
                      >
                          <defs>
                              <style>
                                  .cls-1 {
                                      fill: #ffffff !important;
                                      fill-rule: evenodd !important;
                                  }
                              </style>
                          </defs>
                          <path
                              class="cls-1"
                              d="M223.359,44.057v88.652H103.419V44.057H26.827q2.6,63.234,2.607,118.311t-2.607,118.31h76.592V192.027h119.94v88.651h76.592q-2.285-55.075-2.281-118.31t2.281-118.311H223.359ZM459,283.938h0ZM816.867,163.02q33.566-9.45,47.422-24.934t13.852-35.362q0-19.556-9.615-32.267T835.608,51.065q-23.307-6.676-63.719-6.681H702.468V44.057H625.875q2.605,63.234,2.608,118.311t-2.608,118.31H772.541q46.277,0,72.355-8.637t36.178-24.118q10.1-15.477,10.1-37.644,0-47.254-74.311-47.259h0ZM765.045,103.7q19.556,0,27.867,3.1t8.311,10.592q0,9.457-7.986,13.037t-28.192,3.585H702.468V103.7h62.577ZM702.468,221.034V188.116h62.577q24.115,0,33.407,3.748t9.289,12.222q0,6.523-3.911,10.267t-12.874,5.215q-8.969,1.465-25.911,1.466H702.468ZM1108.24,163.02q33.57-9.45,47.43-24.934,13.845-15.476,13.85-35.362,0-19.556-9.62-32.267t-32.92-19.392q-23.3-6.676-63.71-6.681H993.844V44.057H917.252q2.6,63.234,2.607,118.311t-2.607,118.31H1063.92q46.275,0,72.35-8.637t36.18-24.118q10.1-15.477,10.1-37.644,0-47.254-74.31-47.259h0ZM1056.42,103.7q19.56,0,27.87,3.1t8.31,10.592q0,9.457-7.99,13.037t-28.19,3.585H993.844V103.7h62.576ZM993.844,221.034V188.116h62.576q24.12,0,33.41,3.748t9.29,12.222q0,6.523-3.91,10.267t-12.88,5.215q-8.97,1.465-25.91,1.466H993.844ZM1288.15,44.057h-79.52q2.595,63.234,2.61,118.311,0,55.083-2.61,118.31H1438.4q0-21.831.98-37.155a173.867,173.867,0,0,1,5.22-31.941q-61.935,2.613-156.45,3.26V44.057Zm259.44,143.081q15.645-.321,46.28-0.326,51.825,0,107.23,1.956V132.709q-55.41,1.954-107.23,1.955-30.645,0-46.28-.326V103.05h176.32V44.057H1470.67q2.61,63.234,2.61,118.311t-2.61,118.31h253.24q0-21.51.49-35.688a206.49,206.49,0,0,1,2.77-27.541q-55.725,2.934-179.58,3.585v-33.9ZM460.056,302.921A138.92,138.92,0,1,1,599,164,138.934,138.934,0,0,1,460.056,302.921Zm0-59.64a109.1,109.1,0,1,1,109.122-109.1A109.111,109.111,0,0,1,460.056,243.281Zm0-.119a83.008,83.008,0,1,1,83.024-83.008A83.017,83.017,0,0,1,460.056,243.162Z"
                          />
                      </svg>
                  </div>
              </a>
            </div>
        </header>
        <div class="container-main">
            <div class="json-box-container">
                <span class="json-box_label">INPUT</span>
                <button class="copy-btn" title="Copy JSON">
                    <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path
                            fill-rule="evenodd"
                            clip-rule="evenodd"
                            d="M8 5h7.795c1.115 0 1.519.116 1.926.334.407.218.727.538.945.945.218.407.334.811.334 1.926V16a1 1 0 1 0 2 0V8.128c0-1.783-.186-2.43-.534-3.082a3.635 3.635 0 0 0-1.512-1.512C18.302 3.186 17.655 3 15.872 3H8a1 1 0 0 0 0 2zm7.721 2.334C15.314 7.116 14.91 7 13.795 7h-7.59c-1.115 0-1.519.116-1.926.334a2.272 2.272 0 0 0-.945.945C3.116 8.686 3 9.09 3 10.205v7.59c0 1.114.116 1.519.334 1.926.218.407.538.727.945.945.407.218.811.334 1.926.334h7.59c1.114 0 1.519-.116 1.926-.334.407-.218.727-.538.945-.945.218-.407.334-.811.334-1.926v-7.59c0-1.114-.116-1.519-.334-1.926a2.272 2.272 0 0 0-.945-.945z"
                        />
                    </svg>
                </button>
                <div class="json-box" id="input-json"></div>
            </div>
            <div class="json-box-container">
                <span class="json-box_label">OUTPUT</span>
                <button class="copy-btn" title="Copy JSON">
                    <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path
                            fill-rule="evenodd"
                            clip-rule="evenodd"
                            d="M8 5h7.795c1.115 0 1.519.116 1.926.334.407.218.727.538.945.945.218.407.334.811.334 1.926V16a1 1 0 1 0 2 0V8.128c0-1.783-.186-2.43-.534-3.082a3.635 3.635 0 0 0-1.512-1.512C18.302 3.186 17.655 3 15.872 3H8a1 1 0 0 0 0 2zm7.721 2.334C15.314 7.116 14.91 7 13.795 7h-7.59c-1.115 0-1.519.116-1.926.334a2.272 2.272 0 0 0-.945.945C3.116 8.686 3 9.09 3 10.205v7.59c0 1.114.116 1.519.334 1.926.218.407.538.727.945.945.407.218.811.334 1.926.334h7.59c1.114 0 1.519-.116 1.926-.334.407-.218.727-.538.945-.945.218-.407.334-.811.334-1.926v-7.59c0-1.115-.116-1.519-.334-1.926a2.272 2.272 0 0 0-.945-.945z"
                        />
                    </svg>
                </button>
                <div class="json-box" id="output-json"></div>
            </div>
        </div>
        <canvas
            id="connectionCanvas"
            style="
                position: absolute;
                top: 0;
                left: 0;
                pointer-events: none;
                z-index: 5;
            "
        ></canvas>
    </body>
</html>

<style>
    :root {
        --bg-color: #2b2b2b;
        --header-bg: #1e1e1e;
        --panel-bg: #333333;
        --primary-color: #00bcd4;
        --accent-color: #575757;
        --text-color: #ffffff;
        --btn-bg-default: #3a3a3a;
        --btn-hover: #4a4a4a;
        --icon-default: #aaa; /* светло-серый для иконок по умолчанию */
        --icon-active: #fff; /* белый для активного состояния */
        --lines-active: rgba(233, 126, 255, 0.774);
        --scrollbar-bg: #1e1e1e;
        --scrollbar-thumb: #555555;
        --transition-duration: 0.3s;
    }
    * {
        box-sizing: border-box;
    }
    body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        margin: 0;
        background-color: var(--bg-color);
        color: var(--text-color);
        display: flex;
        flex-direction: column;
        height: 100vh;
        overflow: hidden;
    }
    header {
        background: var(--header-bg);
        padding: 8px 20px;
        width: 100%;
        min-height: 60px;
        position: relative;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }
    .header-left {
        position: absolute;
        left: 20px;
        top: 50%;
        transform: translateY(-50%);
        display: flex;
        gap: 10px;
    }
    .toggle-btn {
        background: var(--btn-bg-default);
        border: none;
        border-radius: 4px;
        padding: 4px;
        cursor: pointer;
        /* Убираем любые transform-переходы у кнопок */
        transition: background var(--transition-duration) ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .toggle-btn:hover {
        background: var(--btn-hover);
    }
    .toggle-btn:active {
        /* Убираем изменение масштаба */
    }
    /* SVG-иконки без переходов и без stroke */
    .toggle-btn svg {
        height: 2em;
        width: 2em;
        fill: var(--icon-default);
        /* Убираем transition */
    }
    /* При активном состоянии просто заливаем иконки белым, без масштабирования */
    .toggle-btn.active svg {
        fill: var(--icon-active);
    }
    /* Для инструментов навигации, автоскроллинга и копирования пути – активное состояние делает иконки белыми */
    #toggle-navigation.active svg,
    #toggle-auto-scroll.active svg,
    #toggle-path.active svg {
        fill: var(--icon-active) !important;
    }
    /* Инструмент линий – по умолчанию светло-серый, а при активном состоянии также белый */
    #toggle-lines:not(.active) svg path {
        fill: var(--icon-default) !important;
    }
    #toggle-lines.active svg path {
        fill: var(--icon-active) !important;
        stroke: #ffffff;
        stroke-width: 3%;
    }
    .header-logo {
        position: absolute;
        left: 50%;
        top: 55%;
        transform: translate(-50%, -50%);
    }
    .header-logo .svg-container {
        display: inline-block;
        vertical-align: middle;
    }
    .header-logo .svg-container svg {
        height: 1.8em;
        width: auto;
    }
    .container-main {
        flex-grow: 1;
        display: flex;
        gap: 20px;
        padding: 20px;
        padding-bottom: 20px;
        width: 100%;
        overflow: auto;
        position: relative;
        z-index: 1;
    }
    .json-box-container {
        flex: 1;
        display: flex;
        flex-direction: column;
        background: var(--panel-bg);
        border-radius: 6px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
        position: relative;
    }
    .json-box_label {
        text-align: center;
        padding: 10px;
        background: var(--header-bg);
        font-weight: bold;
    }
    .json-box {
        flex-grow: 1;
        background: #1e1e1e;
        padding: 10px;
        font-family: monospace;
        overflow: auto;
        position: relative;
        z-index: 4;
    }
    .json-box pre {
        margin: 0;
        white-space: pre-wrap;
        word-break: break-word;
    }
    .json-box::-webkit-scrollbar {
        width: 8px;
    }
    .json-box::-webkit-scrollbar-track {
        background: var(--bg-color);
        border-radius: 4px;
    }
    .json-box::-webkit-scrollbar-thumb {
        background: var(--scrollbar-thumb);
        border-radius: 4px;
    }
    .json-box {
        scrollbar-width: thin;
        scrollbar-color: var(--scrollbar-thumb) var(--bg-color);
    }
    /* Кликабельные ключи и данные – курсор pointer */
    .json-key {
        color: #4fc3f7 !important;
        cursor: pointer;
    }
    .data-match {
        cursor: pointer;
    }
    /* Подсветка оставляем без подчеркивания */
    .highlight-green {
        background-color: rgba(76, 255, 76, 0.178);
        border-radius: 5px;
    }
    .highlight-yellow {
        background-color: rgba(255, 255, 76, 0.185);
        border-radius: 5px;
    }
    .highlight-red {
        background-color: rgba(255, 76, 76, 0.199);
        border-radius: 5px;
    }
    .line {
        position: absolute;
        background-color: var(--lines-active);
        height: 1px;
        transform-origin: left;
        pointer-events: none;
        z-index: 5;
    }
    .code-line {
        display: flex;
        white-space: pre-wrap;
        word-break: break-word;
    }
    .line-num {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        width: 6ch;
        flex-shrink: 0;
        user-select: none;
        color: #aaa;
        margin-right: 1ch;
    }
    .line-number {
        text-align: left;
        white-space: nowrap;
    }
    .toggle {
        display: inline-block;
        width: 1ch;
        text-align: right;
    }
    .collapse-toggle {
        cursor: pointer;
        color: var(--primary-color);
        user-select: none;
        display: inline-block;
        font-size: 1.4em;
        line-height: 1em;
        vertical-align: middle;
        position: relative;
        transition: transform 0.3s ease;
    }
    .collapse-placeholder {
        color: var(--accent-color);
    }
    .copy-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        background: var(--btn-bg-default);
        border: none;
        border-radius: 4px;
        padding: 4px;
        cursor: pointer;
        transition: background var(--transition-duration) ease;
        z-index: 10;
    }
    .copy-btn:hover {
        background: var(--btn-hover);
    }
    .copy-btn:active {
    }
    .copy-btn svg {
        height: 1.5em;
        width: 1.5em;
        fill: var(--icon-default);
    }
    /* Вертикальные направляющие для отступов */
    .indent-guides {
        display: inline-block;
        vertical-align: middle;
    }
    .indent-guide {
        display: inline-block;
        width: 10px;
        border-left: 1px dashed rgba(255, 255, 255, 0.3);
        margin-right: 4px;
        height: 1em;
    }
    /* Toast-уведомление (копирование пути) – слева внизу, меньше и менее заметное */
    .toast {
        position: fixed;
        bottom: 10px;
        left: 10px;
        background: rgba(0, 0, 0, 0.6);
        color: #fff;
        padding: 5px 10px;
        border-radius: 3px;
        opacity: 0;
        transition: opacity 0.5s ease;
        z-index: 10000;
        font-size: 0.8em;
    }
</style>

<script>
    const originalJson = {{ original_json | safe }};
    const processedJson = {{ processed_json | safe }};
    let highlightOn = false;
    let linesOn = false;
    let navigationOn = false;
    let autoScrollOn = false;
    let pathToolOn = false; // Флаг нового инструмента для копирования пути
    let isAutoScrolling = false;
    let collapseState = {};

    const canvas = document.getElementById("connectionCanvas");
    const inputBox = document.getElementById("input-json");
    const outputBox = document.getElementById("output-json");

    let needsRedraw = false;
    function scheduleDrawLines() {
      if (!needsRedraw) {
        needsRedraw = true;
        requestAnimationFrame(() => {
          drawLines();
          needsRedraw = false;
        });
      }
    }

    function escapeHtml(text) {
      return text.replace(/[&<>"']/g, match => {
        switch(match) {
          case '&': return '&amp;';
          case '<': return '&lt;';
          case '>': return '&gt;';
          case '"': return '&quot;';
          case "'": return '&#039;';
        }
      });
    }
    function escapeAttribute(text) {
      return text.replace(/"/g, '&quot;');
    }
    function removeNulls(obj) {
      if (Array.isArray(obj))
        return obj.map(removeNulls).filter(x => x !== null && x !== undefined);
      else if (typeof obj === "object" && obj !== null) {
        let newObj = {};
        Object.keys(obj).forEach(key => {
          if (obj[key] !== null) newObj[key] = removeNulls(obj[key]);
        });
        return newObj;
      } else return obj;
    }
    const filteredOriginal = removeNulls(originalJson);
    const filteredProcessed = removeNulls(processedJson);

    function findLeafNodes(obj, path = "") {
      let leaves = [];
      for (let key in obj) {
        const currentPath = path ? `${path}.${key}` : key;
        if (typeof obj[key] === "object" && obj[key] !== null)
          leaves = leaves.concat(findLeafNodes(obj[key], currentPath));
        else leaves.push({ key, value: obj[key], path: currentPath });
      }
      return leaves;
    }
    const inputLeaves = findLeafNodes(filteredOriginal);
    const outputLeaves = findLeafNodes(filteredProcessed);

    const inputLeafValuesSet = new Set(inputLeaves.map(leaf => leaf.value));
    const outputLeafValuesSet = new Set(outputLeaves.map(leaf => leaf.value));
    const inputLeafStringsSorted = inputLeaves.filter(leaf => typeof leaf.value === "string").sort((a, b) => b.value.length - a.value.length);
    const outputLeafStringsSorted = outputLeaves.filter(leaf => typeof leaf.value === "string").sort((a, b) => b.value.length - a.value.length);

    function getInputHighlight(value) {
      if (outputLeafValuesSet.has(value))
        return "highlight-green";
      if (typeof value === "string") {
        for (let leaf of outputLeafStringsSorted) {
          if (leaf.value.indexOf(value) !== -1)
            return "highlight-yellow";
        }
      }
      return "highlight-red";
    }
    function getOutputHighlight(value) {
      if (inputLeafValuesSet.has(value))
        return "highlight-green";
      if (typeof value === "string") {
        for (let leaf of inputLeafStringsSorted) {
          if (value.indexOf(leaf.value) !== -1)
            return "highlight-yellow";
        }
      }
      return "";
    }
    function renderOutputLeafString(value, path) {
      let matchingInput = null;
      let matchIndex = -1;
      for (let leaf of inputLeafStringsSorted) {
        let idx = value.indexOf(leaf.value);
        if (idx !== -1) {
          matchingInput = leaf.value;
          matchIndex = idx;
          break;
        }
      }
      let content = "";
      if (!matchingInput) {
        content = JSON.stringify(value);
      } else if (value === matchingInput) {
        content = `<span class="highlight-green">${JSON.stringify(value).slice(1, -1)}</span>`;
        content = '"' + content + '"';
      } else {
        const before = escapeHtml(value.slice(0, matchIndex));
        const match = escapeHtml(value.slice(matchIndex, matchIndex + matchingInput.length));
        const after = escapeHtml(value.slice(matchIndex + matchingInput.length));
        content = '"' +
                  (before ? `<span class="highlight-green">${before}</span>` : "") +
                  `<span class="highlight-yellow">${match}</span>` +
                  (after ? `<span class="highlight-green">${after}</span>` : "") +
                  '"';
      }
      return `<span data-leaf="true" data-value="${escapeAttribute(value)}" data-path="${escapeAttribute(path)}" class="data-match">${content}</span>`;
    }
    function renderJSONPretty(obj, type, indent = "", path = "") {
      const indentStep = "  ";
      if (typeof obj !== "object" || obj === null) {
        const isStr = typeof obj === "string";
        if (isStr && type === "output" && highlightOn) {
          return renderOutputLeafString(obj, path);
        }
        const canonical = isStr ? obj : String(obj);
        let str = isStr ? JSON.stringify(obj) : String(obj);
        let classes = "";
        if (highlightOn) {
          classes = type === "input" ? getInputHighlight(obj) : getOutputHighlight(obj);
        }
        return `<span data-leaf="true" data-value="${escapeAttribute(canonical)}" data-path="${escapeAttribute(path)}" class="data-match ${classes}">${str}</span>`;
      } else if (Array.isArray(obj)) {
        let currentPath = path;
        if (obj.length === 0) return "[]";
        if (collapseState[currentPath] === true) {
          return "[" +
            `<span class="collapse-toggle collapsed" data-collapse-path="${currentPath}">▸</span> ` +
            "..." + " ]";
        } else {
          let items = obj.map((item, index) =>
            renderJSONPretty(item, type, indent + indentStep, currentPath ? currentPath + '.' + index : String(index))
          );
          let content = items.map(item => indent + indentStep + item).join(",\n");
          return "[" +
            `<span class="collapse-toggle expanded" data-collapse-path="${currentPath}">▾</span> ` +
            "\n" + content +
            "\n" + indent + "]";
        }
      } else {
        let currentPath = path;
        let keys = Object.keys(obj);
        if (keys.length === 0) return "{}";
        if (collapseState[currentPath] === true) {
          return "{" +
            `<span class="collapse-toggle collapsed" data-collapse-path="${currentPath}">▸</span> ` +
            "..." + " }";
        } else {
          let entries = keys.map(key => {
            let childPath = currentPath ? currentPath + '.' + key : key;
            let renderedKey = `<span class="json-key" data-path="${escapeAttribute(childPath)}">${escapeHtml(JSON.stringify(key))}</span>`;
            let renderedVal = renderJSONPretty(obj[key], type, indent + indentStep, childPath);
            return indent + indentStep + renderedKey + ": " + renderedVal;
          });
          return "{" +
            `<span class="collapse-toggle expanded" data-collapse-path="${currentPath}">▾</span> ` +
            "\n" + entries.join(",\n") +
            "\n" + indent + "}";
        }
      }
    }
    function applyHighlighting() {
      const inputHTML = renderJSONPretty(filteredOriginal, "input", "", "");
      const outputHTML = renderJSONPretty(filteredProcessed, "output", "", "");
      inputBox.innerHTML = `<pre>${inputHTML}</pre>`;
      outputBox.innerHTML = `<pre>${outputHTML}</pre>`;
      addLineNumbers(inputBox.querySelector("pre"));
      addLineNumbers(outputBox.querySelector("pre"));
    }
    // Функция addLineNumbers разбивает pre на строки, добавляет нумерацию и вычисляет уровень отступа,
    // вставляя вертикальные направляющие (indent guides)
    function addLineNumbers(preEl) {
      const html = preEl.innerHTML;
      const lines = html.split('\n').filter(line => line.replace(/<[^>]+>/g, '').trim() !== '');
      const fixedWidth = "6ch";
      let newHTML = '';
      for (let i = 0; i < lines.length; i++) {
        let lineContent = lines[i];
        // Извлекаем ведущие пробелы из текста (без тегов)
        let plainText = lineContent.replace(/<[^>]+>/g, "");
        let indentMatch = plainText.match(/^(\s*)/);
        let indentCount = indentMatch ? Math.floor(indentMatch[1].length / 2) : 0;
        let guides = '';
        for (let j = 0; j < indentCount; j++) {
          guides += '<span class="indent-guide"></span>';
        }
        // Убираем ведущие пробелы из lineContent
        let trimmedLine = lineContent.replace(/^\s+/, '');
        let collapseButton = '';
        const toggleMatch = trimmedLine.match(/<span class="collapse-toggle[^"]*"[^>]*>.*?<\/span>/);
        if (toggleMatch) {
          collapseButton = toggleMatch[0] + ' ';
          trimmedLine = trimmedLine.replace(toggleMatch[0], '');
        } else {
          collapseButton = '<span class="toggle">&nbsp;</span>';
        }
        newHTML += `<div class="code-line">
                        <span class="line-num" style="width: ${fixedWidth};">
                            <span class="line-number">${i + 1}</span>
                            <span class="toggle">${collapseButton}</span>
                        </span>
                        <span class="indent-guides">${guides}</span>
                        <span class="line-content">${trimmedLine}</span>
                    </div>`;
      }
      preEl.innerHTML = newHTML;
    }
    function isElementVisible(childEl, parentEl) {
      const childRect = childEl.getBoundingClientRect();
      const parentRect = parentEl.getBoundingClientRect();
      return (
        childRect.bottom <= parentRect.bottom &&
        childRect.top >= parentRect.top &&
        childRect.right <= parentRect.right &&
        childRect.left >= parentRect.left
      );
    }
    function clamp(val, min, max) {
      return Math.max(min, Math.min(max, val));
    }
    function drawLines() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      const ctx = canvas.getContext("2d");
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      if (linesOn) {
        const inputLeafElements = inputBox.querySelectorAll("[data-leaf='true']");
        const outputLeafElements = outputBox.querySelectorAll("[data-leaf='true']");
        inputLeafElements.forEach(inputEl => {
          const val = inputEl.getAttribute("data-value");
          const outputEl = Array.from(outputLeafElements).find(el => el.getAttribute("data-leaf") === "true" && el.getAttribute("data-value") === val);
          if (outputEl) {
            if (!isElementVisible(inputEl, inputBox) || !isElementVisible(outputEl, outputBox))
              return;
            const inRect = inputEl.getBoundingClientRect();
            const outRect = outputEl.getBoundingClientRect();
            const x1 = inRect.right;
            const y1 = clamp(inRect.top + inRect.height / 2, inputBox.getBoundingClientRect().top, inputBox.getBoundingClientRect().bottom);
            const x2 = outRect.left;
            const y2 = clamp(outRect.top + outRect.height / 2, outputBox.getBoundingClientRect().top, outputBox.getBoundingClientRect().bottom);
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.lineTo(x2, y2);
            ctx.strokeStyle = getComputedStyle(document.documentElement)
                              .getPropertyValue('--lines-active').trim();
            ctx.lineWidth = 1;
            ctx.stroke();
          }
        });
      }
    }
    function toggleCollapseByPath(path) {
      collapseState[path] = !collapseState[path];
      applyHighlighting();
      scheduleDrawLines();
    }

    // Стандартный tooltip (например, для копирования JSON)
    function showTooltip(target, message) {
      const rect = target.getBoundingClientRect();
      const tooltip = document.createElement("div");
      tooltip.className = "copy-tooltip";
      tooltip.textContent = message;
      tooltip.style.position = "fixed";
      tooltip.style.opacity = "1";
      document.body.appendChild(tooltip);
      setTimeout(() => {
        const tooltipRect = tooltip.getBoundingClientRect();
        const top = rect.top - tooltipRect.height - 5;
        const left = rect.left + (rect.width - tooltipRect.width) / 2;
        tooltip.style.top = top + "px";
        tooltip.style.left = left + "px";
      }, 0);
      setTimeout(() => {
        tooltip.style.opacity = "0";
        setTimeout(() => {
          if (tooltip.parentNode) tooltip.parentNode.removeChild(tooltip);
        }, 300);
      }, 400);
    }

    // Новый toast‑уведомлятор для копирования пути – появляется слева внизу и выглядит менее броско
    function showToast(message) {
      const toast = document.createElement("div");
      toast.className = "toast";
      toast.textContent = message;
      document.body.appendChild(toast);
      setTimeout(() => {
        toast.style.opacity = "1";
      }, 10);
      setTimeout(() => {
        toast.style.opacity = "0";
        setTimeout(() => {
          if (toast.parentNode) toast.parentNode.removeChild(toast);
        }, 500);
      }, 1500);
    }

    // Обработчик клика в JSON-панелях – если включён инструмент копирования пути,
    // то ближайший элемент с data-path копируется в буфер, а показывается toast‑уведомление.
    // Если инструмент не включён, при включённой навигации выполняется навигация.
    function handleNavigationClick(e) {
      if (pathToolOn) {
        const target = e.target.closest('[data-path]');
        if (target) {
          const path = target.getAttribute("data-path");
          navigator.clipboard.writeText(path).then(() => {
            showToast("Путь скопирован: " + path);
          });
          e.stopPropagation();
          e.preventDefault();
          return;
        }
      }
      if (!navigationOn) return;
      const leaf = e.target.closest('[data-leaf="true"]');
      if (!leaf) return;
      if (highlightOn && (!leaf.classList.contains("highlight-green") && !leaf.classList.contains("highlight-yellow"))) return;
      const dataValue = leaf.getAttribute("data-value");
      const fromContainer = e.currentTarget.id;
      const toContainerId = fromContainer === "input-json" ? "output-json" : "input-json";
      const toContainer = document.getElementById(toContainerId);
      const targetLeaf = toContainer.querySelector(`[data-leaf="true"][data-value="${(typeof CSS !== 'undefined' && CSS.escape) ? CSS.escape(dataValue) : dataValue}"]`);
      if (targetLeaf) {
        targetLeaf.scrollIntoView({ behavior: "smooth", block: "center" });
      }
    }

    if (typeof CSS === "undefined") {
      window.CSS = {};
    }
    if (!CSS.escape) {
      CSS.escape = function(value) {
        return value.replace(/[^a-zA-Z0-9]/g, function(c) {
          return "_" + c.charCodeAt(0) + "_";
        });
      };
    }

    function autoScroll(fromContainer, toContainer) {
      let leaves = Array.from(fromContainer.querySelectorAll("[data-leaf='true']"));
      let visibleLeaves = leaves.filter(leaf => isElementVisible(leaf, fromContainer));
      if (visibleLeaves.length === 0) return;
      let matchingPositions = [];
      visibleLeaves.forEach(leaf => {
        const value = leaf.getAttribute("data-value");
        const selector = `[data-leaf="true"][data-value="${(typeof CSS !== 'undefined' && CSS.escape) ? CSS.escape(value) : value}"]`;
        const matches = Array.from(toContainer.querySelectorAll(selector));
        matches.forEach(match => {
          let rect = match.getBoundingClientRect();
          let containerRect = toContainer.getBoundingClientRect();
          let relativeY = rect.top - containerRect.top + rect.height / 2;
          matchingPositions.push(relativeY);
        });
      });
      if (matchingPositions.length === 0) return;
      const avg = matchingPositions.reduce((a, b) => a + b, 0) / matchingPositions.length;
      const containerHeight = toContainer.clientHeight;
      const targetScroll = toContainer.scrollTop + (avg - containerHeight / 2);
      isAutoScrolling = true;
      toContainer.scrollTo({top: targetScroll, behavior: "smooth"});
      setTimeout(() => { isAutoScrolling = false; }, 500);
    }
    function initialize() {
      applyHighlighting();
      scheduleDrawLines();
      window.addEventListener("resize", scheduleDrawLines);
      document.querySelectorAll(".json-box").forEach(box =>
        box.addEventListener("scroll", scheduleDrawLines)
      );
      document.getElementById("input-json").addEventListener("click", handleNavigationClick);
      document.getElementById("output-json").addEventListener("click", handleNavigationClick);
      document.addEventListener("click", function(e) {
        const toggleEl = e.target.closest(".collapse-toggle");
        if (toggleEl && toggleEl.dataset.collapsePath) {
          toggleCollapseByPath(toggleEl.dataset.collapsePath);
        }
      });
      document.querySelectorAll(".copy-btn").forEach(btn => {
        btn.addEventListener("click", function(e) {
          e.stopPropagation();
          const container = this.closest(".json-box-container");
          const boxId = container.querySelector(".json-box").id;
          let textToCopy = "";
          if (boxId === "input-json") {
            textToCopy = JSON.stringify(filteredOriginal, null, 2);
          } else if (boxId === "output-json") {
            textToCopy = JSON.stringify(filteredProcessed, null, 2);
          }
          navigator.clipboard.writeText(textToCopy).then(() => {
            showTooltip(this, "Copied!");
          });
        });
      });
      inputBox.addEventListener("scroll", () => {
        if (autoScrollOn && !isAutoScrolling) {
          autoScroll(inputBox, outputBox);
        }
      });
      outputBox.addEventListener("scroll", () => {
        if (autoScrollOn && !isAutoScrolling) {
          autoScroll(outputBox, inputBox);
        }
      });
    }
    const btnHighlight = document.getElementById("toggle-highlight");
    const btnLines = document.getElementById("toggle-lines");
    const btnNavigation = document.getElementById("toggle-navigation");
    const btnAutoScroll = document.getElementById("toggle-auto-scroll");
    const btnPath = document.getElementById("toggle-path"); // Новый инструмент

    btnHighlight.addEventListener("click", () => {
      highlightOn = !highlightOn;
      btnHighlight.classList.toggle("active", highlightOn);
      applyHighlighting();
      scheduleDrawLines();
    });
    btnLines.addEventListener("click", () => {
      linesOn = !linesOn;
      btnLines.classList.toggle("active", linesOn);
      scheduleDrawLines();
    });
    btnNavigation.addEventListener("click", () => {
      navigationOn = !navigationOn;
      btnNavigation.classList.toggle("active", navigationOn);
    });
    btnAutoScroll.addEventListener("click", () => {
      autoScrollOn = !autoScrollOn;
      btnAutoScroll.classList.toggle("active", autoScrollOn);
    });
    btnPath.addEventListener("click", () => {
      pathToolOn = !pathToolOn;
      btnPath.classList.toggle("active", pathToolOn);
    });
    initialize();
</script>
